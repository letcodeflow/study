from sklearn.model_selection import train_test_split,cross_val_score,KFold,RandomizedSearchCV
# from sklearn.utils import all_estimators
from sklearn.metrics import accuracy_score
from sklearn.metrics import accuracy_score
from bayes_opt import BayesianOptimization
from xgboost import XGBClassifier
import numpy as np
import warnings
import pandas as pd
pd.set_option('display.max_rows', None)
warnings.filterwarnings('ignore')
path184 = 'C:/Users/aiapalm/OneDrive - KNOU/beat/study/_data/kaggle_titanic/'
path202 = 'C:/Users/aia200/OneDrive - 한국방송통신대학교/beat/study/_data/kaggle_titanic/'
pathhm = 'C:/Users/asthe/OneDrive - KNOU/beat/study/_data/kaggle_titanic/'
train_set = pd.read_csv(path184 + 'train.csv', index_col=0)
train_set = train_set.dropna()
test_set = pd.read_csv(path184 + 'test.csv', index_col=0)
test_set = test_set.dropna()
x = train_set.drop(['Survived','Name', 'Ticket', 'Cabin','Sex','Embarked'], axis=1)
y = train_set['Survived']
print(train_set.isna().any()[lambda x:x])
print(test_set.isna().any()[lambda x:x])
from sklearn.experimental import enable_iterative_imputer
from sklearn.impute import SimpleImputer
imp = SimpleImputer(strategy='most_frequent')
# imp = KNNImputer(n_neighbors=4)
# imp = IterativeImputer(n_nearest_features=3)
# train_set['Embarked'] = imp.fit_transform(train_set['Embarked'])
print(test_set['Embarked'].isnull().sum())
train_set['Embarked'].fillna('S',inplace=True)
# test_set['Embarked'].fillna('S',inplace=True)
print(test_set['Embarked'].value_counts(dropna=False))
# print(type(train_set),train_set.isnull().sum(), train_set.info(),train_set.describe(),train_set.head())
train_set = pd.get_dummies(train_set, columns=['Embarked','Sex'])
test_set = pd.get_dummies(test_set, columns=['Embarked','Sex'])
# test_set = pd.get_dummies(test_set, axis= 1,columns=['Embarked','Sex'])
train_set.drop(['Ticket','Cabin','Name'],inplace=True,axis=1)
test_set.drop(['Ticket','Cabin','Name'],inplace=True,axis=1)
# print(train_set['Age'].describe())
# train_set['Age'] = imp.fit_transform(train_set['Age'])
train_set['Age'].fillna(train_set['Age'].mean(),inplace=True)
test_set['Age'].fillna(test_set['Age'].mean(),inplace=True)
test_set['Fare'].fillna(test_set['Fare'].mean(),inplace=True)

# print(test_set.isnull().sum())
# print(train_set.dtypes)
# print(train_set.corr())
# import matplotlib.pyplot as plt
# import seaborn as sns
# # sns.set(1.2)
# sns.heatmap(data = train_set.corr(),square=True,annot=True,cbar=True)
# plt.show()



def outliers(data):
    q1,q2,q3 = np.percentile(data,[25,50,75])
    print(q1,q2,q3)
    iqr = q3-q1
    lower_bound = q1 - (iqr*1.5)
    upper_bound = q3 + (iqr*1.5)
    return np.where((data>upper_bound)|(data<lower_bound))
print(outliers(train_set['Age']))
x_data = train_set.drop(['Survived'],axis=1)
y_data = train_set['Survived']
# y_data = y_data.value.reshape(-1,1)
y_data = y_data.values.reshape(-1,1)
print(x_data.shape, y_data.shape)
# print(dir(y_data))
x_train, x_test, y_train, y_test = train_test_split(x_data,y_data,train_size=0.8,random_state=234)
import tensorflow as tf
x = tf.placeholder(tf.float32,shape=[None,10])
w = tf.Variable(tf.random_normal([10,1]))
b = tf.Variable(tf.random_normal([1,1]))
y = tf.placeholder(tf.float32,shape=[None,1])

hypothesis = tf.sigmoid(tf.matmul(x,w)+b)
loss = tf.reduce_mean(y*tf.log(hypothesis)+(1-y)*tf.log(1-hypothesis))
train = tf.train.GradientDescentOptimizer(learning_rate=0.0001).minimize(loss)
with tf.compat.v1.Session() as sess:
    sess.run(tf.global_variables_initializer())
    for i in range(201):
        h_val = sess.run(hypothesis, feed_dict={x:x_train,y:y_train})
        if i % 20 ==0:
            print(i,h_val)
    pred = sess.run(hypothesis,feed_dict={x:x_test})
    # pred = np.argmax(pred,axis=1)
    pred = pred.round()
    print(pred.shape,y_test.shape)
    print(accuracy_score(y_test,pred))


# 전처리
# 0.8208955223880597
# 0.835820895522388
# 0.832089552238806
# 0.8059701492537313

# train_set.drop(['Ticket','Cabin','Name','Sex','Embarked'],inplace=True,axis=1)
# 0.7090909090909091
# 0.6909090909090909
# 0.6545454545454545
# 0.6545454545454545

# bagging 100 xgb
# 0.6909090909090909

# voting
# LogisticRegression 정확도: 0.7273
# KNeighborsClassifier 정확도: 0.7273
# XGBClassifier 정확도: 0.6909
# LGBMClassifier 정확도: 0.7091
# CatBoostClassifier 정확도: 0.7273

# fit에서 eval제거 xgb
# 'target': 0.8108108108108109