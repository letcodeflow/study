from sklearn.model_selection import train_test_split,cross_val_score,KFold,RandomizedSearchCV
from sklearn.utils import all_estimators
from sklearn.metrics import accuracy_score
from sklearn.metrics import accuracy_score
from bayes_opt import BayesianOptimization
from xgboost import XGBClassifier
import numpy as np
import warnings
import pandas as pd
pd.set_option('display.max_rows', None)
warnings.filterwarnings('ignore')
path184 = 'C:/Users/aiapalm/OneDrive - KNOU/beat/study/_data/kaggle_titanic/'
path202 = 'C:/Users/aia200/OneDrive - 한국방송통신대학교/beat/study/_data/kaggle_titanic/'
pathhm = 'C:/Users/asthe/OneDrive - KNOU/beat/study/_data/kaggle_titanic/'
train_set = pd.read_csv(path184 + 'train.csv', index_col=0)
train_set = train_set.dropna()
test_set = pd.read_csv(path184 + 'test.csv', index_col=0)
test_set = test_set.dropna()
x = train_set.drop(['Survived','Name', 'Ticket', 'Cabin','Sex','Embarked'], axis=1)
y = train_set['Survived']
print(train_set.isna().any()[lambda x:x])
print(test_set.isna().any()[lambda x:x])
from sklearn.experimental import enable_iterative_imputer
from sklearn.impute import SimpleImputer,KNNImputer,IterativeImputer
imp = SimpleImputer(strategy='most_frequent')
imp = KNNImputer(n_neighbors=4)
imp = IterativeImputer(n_nearest_features=3)
# train_set['Embarked'] = imp.fit_transform(train_set['Embarked'])
print(test_set['Embarked'].isnull().sum())
train_set['Embarked'].fillna('S',inplace=True)
# test_set['Embarked'].fillna('S',inplace=True)
print(test_set['Embarked'].value_counts(dropna=False))
# print(type(train_set),train_set.isnull().sum(), train_set.info(),train_set.describe(),train_set.head())
train_set = pd.get_dummies(train_set, columns=['Embarked','Sex'])
test_set = pd.get_dummies(test_set, columns=['Embarked','Sex'])
# test_set = pd.get_dummies(test_set, axis= 1,columns=['Embarked','Sex'])
train_set.drop(['Ticket','Cabin','Name'],inplace=True,axis=1)
test_set.drop(['Ticket','Cabin','Name'],inplace=True,axis=1)
# print(train_set['Age'].describe())
# train_set['Age'] = imp.fit_transform(train_set['Age'])
train_set['Age'].fillna(train_set['Age'].mean(),inplace=True)
test_set['Age'].fillna(test_set['Age'].mean(),inplace=True)
test_set['Fare'].fillna(test_set['Fare'].mean(),inplace=True)

# print(test_set.isnull().sum())
# print(train_set.dtypes)
# print(train_set.corr())
# import matplotlib.pyplot as plt
# import seaborn as sns
# # sns.set(1.2)
# sns.heatmap(data = train_set.corr(),square=True,annot=True,cbar=True)
# plt.show()



def outliers(data):
    q1,q2,q3 = np.percentile(data,[25,50,75])
    print(q1,q2,q3)
    iqr = q3-q1
    lower_bound = q1 - (iqr*1.5)
    upper_bound = q3 + (iqr*1.5)
    return np.where((data>upper_bound)|(data<lower_bound))
print(outliers(train_set['Age']))
x = train_set.drop(['Survived'],axis=1)
y = train_set['Survived']
x_train, x_test, y_train, y_test = train_test_split(x,y,train_size=0.8,random_state=234)
Parameters = {
    'n_estimators':[100],
    'learning_rate':[0.1],
    'max_depth':[None],
    'gamma': [0],  
    'min_child_weight':[5], 
    'subsample':[1], #디폴트1 0~1
    'colsample_bytree':[0.1], 
    'colsample_bylevel':[1], 
    'colsample_bynode':[1], 
    'reg_alpha':[0], # l1 정규화 절대값으로 exploding 방지 0~inf/ alpha라고해도됨 디폴트0
    # 'reg_lambda':[0,0.1,0.001,0.00000001,100,10000,100000] # l2 정규화 제곱으로 exploding 방지 0~inf 디폴트1 lambda
}
bayesian_params = {
    'max_depth':(6,16),
    'num_leaves':(24,64),
    'min_child_samples':(10,200),
    'min_child_weight':(1,50),
    'subsample':(0.5,1),
    'colsample_bytree':(0.5,1),
    'max_bin':(10,500),
    'reg_lambda':(0.001,10),
    'reg_alpha':(0.01,50)
}
def lgb_hamsu(max_depth, num_leaves, min_child_samples, min_child_weight,subsample,colsample_bytree,max_bin,reg_lambda, reg_alpha):
    params = {
        'n_estimator':500, 'learning_rate':0.02,
        'max_depth': int(round(max_depth)), #위에서 받아온 값의 무조건 정수형
        'num_leaves':int(round(num_leaves)),
        'min_child_samples':int(round(min_child_samples)),
        'min_child_weight':int(round(min_child_weight)),
        'subsample':max(min(subsample,1),0), #어떤 값이든 0~1사이
        'colsample_bytree':max(min(colsample_bytree,1),0),
        'max_bin':max(int(round(max_bin)),10), #10이상만
        'reg_lambda':max(reg_lambda,0), #양수만
        'reg_alpha':max(reg_alpha,0)
    }
    model = XGBClassifier(**params) #**딕셔너리 형태로 받겠다 * 여러개의 인자를 받겠다
    lg = XGBClassifier()

    lg.fit(x_train,y_train, eval_set = [(x_train,y_train),(x_test,y_test)],
        # eval_metric = 'mlogloss',
        verbose=0,
        early_stopping_rounds=50)
    pred = lg.predict(x_test)
    result = accuracy_score(y_test,pred)
    return result
lgb_bo = BayesianOptimization(f=lgb_hamsu,
                              pbounds=bayesian_params,
                              random_state=29837)
lgb_bo.maximize(init_points=5,n_iter=50)
print(lgb_bo.max)


# 전처리
# 0.8208955223880597
# 0.835820895522388
# 0.832089552238806
# 0.8059701492537313

# train_set.drop(['Ticket','Cabin','Name','Sex','Embarked'],inplace=True,axis=1)
# 0.7090909090909091
# 0.6909090909090909
# 0.6545454545454545
# 0.6545454545454545

# bagging 100 xgb
# 0.6909090909090909

# voting
# LogisticRegression 정확도: 0.7273
# KNeighborsClassifier 정확도: 0.7273
# XGBClassifier 정확도: 0.6909
# LGBMClassifier 정확도: 0.7091
# CatBoostClassifier 정확도: 0.7273

# fit에서 eval제거 xgb
# 'target': 0.8108108108108109